- name: python3-pip 및 kubernetes 모듈 설치  # Ansible k8s 모듈 동작을 위한 Python 환경 세팅
  apt:
    name:
      - python3-pip         # pip 설치 (Ubuntu 22.04 기준)
    state: present
    update_cache: yes

- name: kubernetes, openshift 파이썬 패키지 설치  # k8s 모듈이 원격에서 작동하려면 해당 패키지 필수
  pip:
    name:
      - kubernetes
      - openshift
    executable: pip3        # python3용 pip 명시

- name: Docker 설치  # Docker 및 containerd 관련 패키지 설치
  apt:
    name: "{{ item }}"  # 설치할 패키지 이름 (반복문으로 처리)
    state: present       # 해당 패키지를 설치 상태로 유지
  loop:
    - docker.io          # Docker 엔진 (컨테이너 실행 도구)
    - containerd         # 컨테이너 런타임 (K8s에서 권장되는 런타임)
    - apt-transport-https  # HTTPS를 통한 APT 저장소 접근 허용
    - ca-certificates    # TLS 인증서 설치 및 신뢰
    - curl               # URL 기반 파일 다운로드 툴
    - gnupg              # GPG 키 관리 도구 (저장소 인증용)
    - lsb-release        # 배포판 버전 확인 (저장소 설정에 필요)

- name: containerd 설정 파일 생성  # containerd의 설정 파일을 기본값으로 생성
  shell: |
    mkdir -p /etc/containerd                  # 설정 디렉토리 생성
    containerd config default > /etc/containerd/config.toml  # 기본 설정 덤프
  args:
    creates: /etc/containerd/config.toml      # 설정 파일이 없을 때만 실행

- name: containerd systemd 설정 (SystemdCgroup = true)  # systemd를 cgroup 드라이버로 사용
  replace:
    path: /etc/containerd/config.toml         # 설정 파일 경로
    regexp: 'SystemdCgroup = false'           # 기본값을 찾아서
    replace: 'SystemdCgroup = true'           # systemd 기반으로 변경 (kubeadm 요구사항)

- name: br_netfilter 커널 모듈 로드  # (1단계) 현재 커널에 br_netfilter 모듈을 즉시 로드하여 브릿지 인터페이스를 통한 iptables 적용을 가능하게 함
  shell: modprobe br_netfilter        # shell 명령어로 직접 로드 (Ansible에 modprobe 공식 모듈 없음)

- name: br_netfilter 모듈 영구 설정  # (2단계) 재부팅 시에도 br_netfilter 모듈이 자동 로드되도록 설정
  copy:
    dest: /etc/modules-load.d/br_netfilter.conf  # 시스템 부팅 시 자동으로 모듈을 로드할 수 있도록 설정 파일 생성
    content: "br_netfilter\n"                    # 단일 줄로 모듈 이름 입력 (다른 내용 필요 없음)

- name: sysctl 설정 - bridge-nf-call-iptables  # (3단계) 브릿지 네트워크 트래픽에 iptables 적용 허용
  sysctl:
    name: net.bridge.bridge-nf-call-iptables         # IPv4 트래픽이 bridge 인터페이스를 통해 전달될 때 iptables 정책이 적용되도록 설정
    value: "1"                                       # 1로 설정하면 해당 커널 파라미터 활성화됨
    state: present                                   # 현재 커널 설정 상태로 유지 (이미 설정돼 있어도 적용 시도)
    reload: yes                                      # 설정 변경 사항을 즉시 시스템에 반영 (sysctl -p 없이 적용)

- name: sysctl 설정 - bridge-nf-call-ip6tables  # (3-1단계) 브릿지 네트워크 트래픽에 ip6tables 적용 허용 (IPv6)
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables        # IPv6 트래픽이 bridge 인터페이스를 통해 전달될 때 ip6tables 정책이 적용되도록 설정
    value: "1"                                       # 1로 설정하면 해당 커널 파라미터 활성화됨
    state: present                                   # 현재 커널 설정 상태로 유지 (이미 설정돼 있어도 적용 시도)
    reload: yes                                      # 설정 변경 사항을 즉시 시스템에 반영 (sysctl -p 없이 적용)

- name: containerd 재시작  # 설정 변경을 반영하기 위한 재시작 및 자동시작 설정
  systemd:
    name: containerd                          # 대상 서비스 이름
    state: restarted                          # 즉시 재시작
    enabled: yes                              # 부팅 시 자동 실행 설정

- name: GPG 키 저장 디렉토리 생성  # GPG 키를 보관할 /etc/apt/keyrings 디렉토리 생성
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: GPG 키 다운로드 및 dearmor 변환  # 키를 바이너리로 변환하여 APT에 등록 가능한 형식으로 저장
  shell: |
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-archive-keyring.gpg

- name: Kubernetes APT 저장소 추가 (Ubuntu 22.04 대응)  # Kubernetes 공식 저장소 (v1.33) 등록
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /" > /etc/apt/sources.list.d/kubernetes.list
  args:
    creates: /etc/apt/sources.list.d/kubernetes.list

- name: APT 패키지 인덱스 강제 갱신  # 새로운 저장소 반영을 위해 패키지 목록 갱신
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 0
    
- name: kubeadm/kubelet/kubectl 설치  # 쿠버네티스 설치 도구 3종 설치
  apt:
    name:
      - kubelet       # 노드 에이전트 (Pod 실행 및 상태 보고)
      - kubeadm       # 클러스터 초기화 및 조인 도구
      - kubectl       # 클러스터 제어 CLI 도구
    state: present
    update_cache: yes  # APT 캐시 갱신

- name: kubeadm init 실행  # 마스터 노드에서 클러스터 초기화 실행
  shell: kubeadm init --pod-network-cidr=10.244.0.0/16 # Flannel에 필요한 Pod CIDR 설정
  args:
    creates: /etc/kubernetes/admin.conf # 이미 초기화된 경우 재실행 방지

- name: kube-apiserver.yaml에 --service-node-port-range=80-32767 옵션 추가
  lineinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    insertafter: '^\s*- --secure-port=6443'
    line: '    - --service-node-port-range=80-32767'
    state: present
  become: true

- name: kubelet 바로 재시작
  shell: systemctl restart kubelet
  become: true

- name: .kube 디렉토리 생성  # kubectl 설정 파일을 위한 사용자 디렉토리 생성
  file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
    
- name: admin.conf 복사  # kubectl 사용을 위한 kubeconfig 복사
  copy:
    src: /etc/kubernetes/admin.conf           # 마스터 초기화 시 생성되는 인증 파일
    dest: /home/{{ ansible_user }}/.kube/config  # 일반 사용자 홈 디렉토리로 복사
    remote_src: yes                           # 원격 경로에서 복사
    owner: "{{ ansible_user }}"                # 파일 소유자 설정
    group: "{{ ansible_user }}"                # 파일 그룹 설정
    mode: '0644'                              # 읽기 권한 설정

- name: Flannel CNI 설치 (API 서버 대기)  # API 서버가 준비될 때까지 재시도하며 Flannel 설치
  #간단버전 command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml --validate=false
  shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml --validate=false  # schema 검증 생략으로 연결 오류 우회
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config  # 복사된 admin.conf 경로
  register: flannel_result  # 실행 결과 (리턴 코드 등)를 flannel_result 변수에 저장
  retries: 5                # 최대 5번까지 재시도
  delay: 10                 # 재시도 간 10초 대기
  until: flannel_result.rc == 0  # 리턴 코드가 0일 때까지 반복 (0이면 성공)

- name: CNI 플러그인 바이너리 설치 (기본 CNI 기능 보장)
  unarchive:
    src: https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz
    dest: /opt/cni/bin
    remote_src: yes
    creates: /opt/cni/bin/loopback

- name: Flannel 파드가 생성될 때까지 대기 (존재 확인 루프)
  shell: |
    while [ -z "$(kubectl get pods -n kube-flannel -l app=flannel -o name 2>/dev/null)" ]; do
      echo "flannel pod not found yet... waiting"
      sleep 3
    done
  register: wait_for_flannel_creation
  changed_when: false
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

- name: Flannel 파드가 Ready 상태가 될 때까지 대기
  shell: |
    kubectl wait --for=condition=Ready pods -l app=flannel -n kube-flannel --timeout=120s
  register: flannel_ready
  failed_when: flannel_ready.rc != 0
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

- name: Flannel DaemonSet 상태 확인 (Running 될 때까지 대기)  # Flannel Pod가 정상적으로 실행(Running)될 때까지 반복 확인
  shell: |
    kubectl get pods -n kube-flannel -l app=flannel --field-selector=status.phase=Running | grep flannel  # 실행 중인 flannel 파드가 있는지 확인
  register: flannel_pod_status  # 명령 결과를 변수에 저장 (rc, stdout 등)
  retries: 10                   # 최대 10번까지 재시도
  delay: 5                      # 각 재시도 사이에 5초 대기
  until: flannel_pod_status.rc == 0  # 명령이 성공(rc=0)할 때까지 반복 (성공 조건: Running 상태인 flannel 파드가 존재)
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config  # kubectl 인증을 위한 kubeconfig 경로 지정 (사용자 홈 기준)

- name: CoreDNS ConfigMap patch - 외부 DNS 서버 명시 (8.8.8.8, 1.1.1.1)
  shell: |
    kubectl patch configmap coredns -n kube-system --type merge -p '{"data":{"Corefile":".:53 {\n    errors\n    health {\n       lameduck 5s\n    }\n    ready\n    kubernetes cluster.local in-addr.arpa ip6.arpa {\n       pods insecure\n       fallthrough in-addr.arpa ip6.arpa\n       ttl 30\n    }\n    prometheus :9153\n    forward . 8.8.8.8 1.1.1.1 {\n       max_concurrent 1000\n    }\n    cache 30 {\n       disable success cluster.local\n       disable denial cluster.local\n    }\n    loop\n    reload\n    loadbalance\n}"}}'
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

- name: CoreDNS 재시작
  shell: kubectl rollout restart deployment coredns -n kube-system
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config

- name: master 노드 taint 제거 (조건적 실행)  # 마스터 노드의 taint가 존재할 때만 제거하는 안전한 방식
  shell: |
    if kubectl describe node $(hostname) | grep -q 'node-role.kubernetes.io/control-plane'; then  # 현재 노드에 해당 taint가 있을 경우에만
      kubectl taint nodes $(hostname) node-role.kubernetes.io/control-plane-;  # taint 제거 (단일 노드에서도 워크로드 스케줄링 허용)
    fi
  environment:
    KUBECONFIG: /home/{{ ansible_user }}/.kube/config  # kubectl이 사용할 인증 파일 경로 지정 (해당 사용자 기준)
  changed_when: false  # 항상 상태 변경이 없다고 간주 (idempotent 처리용)
  failed_when: false   # taint가 없거나 제거 실패해도 전체 플레이 실패로 간주하지 않음 (안정성 확보)
