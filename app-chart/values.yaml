replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: [ ]

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: { }
  name: ""

podAnnotations: { }
podLabels: { }

podSecurityContext: { }


securityContext: { }

service:
  type: ClusterIP
  port: 80

  tls: [ ]

resources: { }

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80


volumes: [ ]

volumeMounts: [ ]

nodeSelector: { }

tolerations: [ ]

affinity: { }

redis:
  replicas: 1 # Added
  image:
    repository: redis
    tag: 7.2
    pullPolicy: IfNotPresent
  containerPort: 6379
  service:
    type: ClusterIP
    port: 6379
    targetPort: 6379

fastapi:
  image:
    repository: ghcr.io/ajh9789/fastapi_service
    tag: latest
    pullPolicy: Always

  containerPort: 8000

  command: [ "uvicorn" ]
  args: [ "fastapi_service:app", "--host", "0.0.0.0", "--port", "8000", "--proxy-headers" ]

  env:
    - name: REDIS_HOST
      value: redis

  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret

  livenessProbe:
    httpGet:
      path: /
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /status
      port: 8000
    initialDelaySeconds: 5
    periodSeconds: 5
    failureThreshold: 2

  service:
    portName: http
    port: 8000
    targetPort: 8000

analyzer:
  replicas: 1
  image:
    repository: ghcr.io/ajh9789/analyzer_worker
    tag: latest
    pullPolicy: Always
  command: [ "celery" ]
  args: [ "-A", "analyzer_worker", "worker", "-Q", "analyzer_queue", "--loglevel=info"]
  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret
  env:
    - name: REDIS_HOST
      value: redis
    - name: DOCKER
      value: "1"


sttWorker:
  replicas: 1
  image:
    repository: ghcr.io/ajh9789/stt_worker
    tag: latest
    pullPolicy: Always
  command: [ "celery" ]
  args: [ "-A", "stt_worker", "worker", "-Q", "stt_queue", "--loglevel=info" ]
  env:
    - name: REDIS_HOST
      value: redis
    - name: DOCKER
      value: "1"
    - name: MODEL_PATH
      value: /app/models
    - name: MODEL_SIZE
      value: small  # 또는 tiny, small, medium
  envFrom:
    - configMapRef:
        name: whisper-config
    - secretRef:
        name: whisper-secret
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 2072Mi
  volumeMounts: # Added
    - name: models-volume
      mountPath: /app/models
  volumes: # Added
    - name: models-volume
      persistentVolumeClaim:
        claimName: pvc-models

sttWorkerHPA:
  enabled: true
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 80

whisperConfig:
  REDIS_HOST: redis
  MODEL_PATH: /app/models
  MODEL_SIZE: small
  DOCKER: "1"

persistentVolume:
  name: pv-models
  storage: 2Gi
  path: /mnt/models
  storageClassName: ""

persistentVolumeClaim:
  name: pvc-models
  storage: 2Gi
  storageClassName: ""

ingress:
  enabled: true
  name: whisper-ingress
  className: nginx # Changed from azure/application-gateway
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true" # Changed from appgw.ingress.kubernetes.io/ssl-redirect
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true" # Added
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  tls:
    - hosts:
        - your-domain.com # 실제 도메인
      secretName: letsencrypt-tls-secret
  rules:  
    - host: your-domain.com # 실제 도메인
      http:
        paths:
          - path: /ws
            pathType: Prefix
            backend:
              service:
                name: fastapi-svc
                port:
                  number: 8000
          - path: /status
            pathType: Prefix
            backend:
              service:
                name: fastapi-svc
                port:
                  number: 8000
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: fastapi-svc
                port:
                  number: 8000
          - path: /grafana
            pathType: Prefix
            backend:
              service:
                name: monitoring-grafana
                port:
                  number: 3000
          - path: /prometheus
            pathType: Prefix
            backend:
              service:
                name: monitoring-kube-prometheus-prometheus
                port:
                  number: 9090
          - path: /alertmanager
            pathType: Prefix
            backend:
              service:
                name: monitoring-kube-prometheus-alertmanager
                port:
                  number: 9093
          - path: /
            pathType: Prefix
            backend:
              service:
                name: fastapi-svc
                port:
                  number: 8000


certManager:
  certName: letsencrypt-cert
  issuerName: letsencrypt-prod
  namespace: default       
  domain: your-domain.com # 실제 도메인
  secretName: letsencrypt-tls-secret
  duration: 2160h
  renewBefore: 720h

issuer:
  enabled: true
  name: letsencrypt-prod
  acmeServer: https://acme-v02.api.letsencrypt.org/directory
  email: your-email@example.com # 실제 이메일
  privateKeySecretName: letsencrypt-prod-private-key

kube-prometheus-stack: # Added
  enabled: true
  grafana:
    enabled: true
    adminUser: admin
    adminPassword: admin
    defaultDatasourceEnabled: false
    sidecar:
      datasources:
        enabled: false
      dashboards:
        enabled: true
        searchNamespace: ALL
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus-operated.default.svc.cluster.local:9090
            isDefault: true
          - name: Loki
            type: loki
            access: proxy
            url: http://loki.default.svc.cluster.local:3100
            isDefault: false
  prometheus:
    enabled: true
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelector: {}
      additionalServiceMonitors:
        - name: fastapi-monitor
          selector:
            matchLabels:
              app: fastapi
          namespaceSelector:
            matchNames:
              - default
          endpoints:
            - port: http
              path: /metrics

loki: # Added
  enabled: true
  grafana:
    enabled: false
  prometheus:
    enabled: false
  promtail:
    enabled: true
    config:
      snippets:
        pipelineStages:
          - cri: {}
        extraScrapeConfigs: |
          - job_name: fastapi-logs
            static_configs:
              - targets:
                  - localhost
                labels:
                  job: fastapi
                  __path__: /var/log/containers/*fastapi*.log

